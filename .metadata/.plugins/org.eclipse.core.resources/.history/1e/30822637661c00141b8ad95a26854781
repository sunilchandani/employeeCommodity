package com.sunil.Client;

import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.GenericType;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.config.ClientConfig;
import com.sun.jersey.api.client.config.DefaultClientConfig;
import com.sun.jersey.api.json.JSONConfiguration;
import com.sunil.Entities.Employee;
import com.sunil.common.EmployeeConstants;

public class JerseyEmployeeClient {

	private static WebResource getWebResourceForURI(String uri) {
		ClientConfig clientConfig = new DefaultClientConfig();
		clientConfig.getFeatures().put(JSONConfiguration.FEATURE_POJO_MAPPING,
				Boolean.TRUE);
		Client client = Client.create(clientConfig);
		return client.resource(uri);
	}

	public static boolean storeEmployee(Employee emp) {
		try {
			WebResource webResource = getWebResourceForURI(EmployeeConstants.EMPLOYEE_SERVICE_URL
					+ EmployeeConstants.STORE_EMPLOYEE_URL);
			ClientResponse response = webResource.type("application/json")
					.post(ClientResponse.class, emp);
			if (response.getStatus() != 201) {
				throw new RuntimeException("Failed : HTTP error code : "
						+ response.getStatus());
			}
			System.out.println("Output from Server .... \n");
			String output = response.getEntity(String.class);
			System.out.println(output);
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}

	public static Employee getEmployee(Integer empId) {
		Employee output = null;
		try {
			WebResource webResource = getWebResourceForURI(EmployeeConstants.EMPLOYEE_SERVICE_URL
					+ EmployeeConstants.GET_EMPLOYEE_BY_PARAM_URL + empId);

			ClientResponse response = webResource.accept("application/json")
					.get(ClientResponse.class);

			System.out.println(response.toString());
			if (response.getStatus() != 200) {
				throw new RuntimeException("Failed : HTTP error code : "
						+ response.getStatus());
			}

			output = response.getEntity(Employee.class);
			System.out.println("Output from Server .... \n");
			System.out.println(output);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		return output;
	}

	public static List<Employee> getEmployee() {
		List<Employee> empList = new ArrayList<Employee>();
		try {
			WebResource webResource = getWebResourceForURI(EmployeeConstants.EMPLOYEE_SERVICE_URL
					+ EmployeeConstants.GET_ALL_EMOPLOYEE_URL);

			ClientResponse response = webResource.accept("application/json")
					.get(ClientResponse.class);

			System.out.println(response.toString());
			if (response.getStatus() != 201) {
				throw new RuntimeException("Failed : HTTP error code : "
						+ response.getStatus());
			}
			//
			empList = (List<Employee>) response
					.getEntity(new GenericType<List<Employee>>() {
					});
			System.out.println("Output from Server .... \n");
			System.out.println(empList);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		return empList;
	}

	public static boolean updateEmployee(Employee emp) {
		try {
			WebResource webResource = getWebResourceForURI("http://localhost:8080/employee/rest/json/employee/updateEmp");

			ClientResponse response = webResource.type("application/json")
					.post(ClientResponse.class, emp);

			if (response.getStatus() != 201) {
				throw new RuntimeException("Failed : HTTP error code : "
						+ response.getStatus());
			}

			System.out.println("Output from Server .... \n");
			String output = response.getEntity(String.class);
			System.out.println(output);
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}

	public static boolean deleteEmployee(Integer empId) {
		try {
			WebResource webResource = getWebResourceForURI("http://localhost:8080/employee/rest/json/employee/delete/"
					+ empId);
			ClientResponse response = webResource.type("application/json")
					.post(ClientResponse.class);

			if (response.getStatus() != 201) {
				throw new RuntimeException("Failed : HTTP error code : "
						+ response.getStatus());
			}

			System.out.println("Output from Server .... \n");
			String output = response.getEntity(String.class);
			System.out.println(output);

		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}

	public static List<Employee> searchEmployee(Employee emp) {
		List<Employee> output = null;
		try {
			boolean flag = false;
			String uri = "";
			if (emp.getEmpId() != null) {
				if (!flag)
					uri = uri.concat("?");
				else
					uri = uri.concat("&");
				uri = uri.concat("empId=" + emp.getEmpId());
				flag = true;
			}
			if (emp.getName() != null && !emp.getName().isEmpty()) {
				if (!flag)
					uri = uri.concat("?");
				else
					uri = uri.concat("&");
				uri = uri.concat("name="
						+ URLEncoder.encode(emp.getName(), "UTF-8"));
				flag = true;
			}
			if (emp.getDepartment() != null && !emp.getDepartment().isEmpty()) {
				if (!flag)
					uri = uri.concat("?");
				else
					uri = uri.concat("&");
				uri = uri.concat("department="
						+ URLEncoder.encode(emp.getDepartment(), "UTF-8"));
				flag = true;
			}
			if (emp.getAge() != null) {
				if (!flag)
					uri = uri.concat("?");
				else
					uri = uri.concat("&");
				uri = uri.concat("age=" + emp.getAge());
				flag = true;
			}

			if (emp.getAddress() != null && !emp.getAddress().isEmpty()) {
				if (!flag)
					uri = uri.concat("?");
				else
					uri = uri.concat("&");
				uri = uri.concat("address="
						+ URLEncoder.encode(emp.getAddress(), "UTF-8"));
				flag = true;
			}

			System.out.println("Employee: " + emp);
			uri = "http://localhost:8080/employee/rest/json/employee/search"
					+ uri;
			WebResource webResource = getWebResourceForURI(uri);
			ClientResponse response = webResource.type("application/json").get(
					ClientResponse.class);

			if (response.getStatus() != 201 && response.getStatus() != 200) {
				throw new RuntimeException("Failed : HTTP error code : "
						+ response.getStatus());
			}

			System.out.println("Output from Server .... \n");
			if (response.getStatus() == 200)
				System.out.println("Search results in 0 employees.");
			else
				output = (List<Employee>) response
						.getEntity(new GenericType<List<Employee>>() {
						});
			if (output != null)
				System.out.println(output);

		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		return output;
	}
}
