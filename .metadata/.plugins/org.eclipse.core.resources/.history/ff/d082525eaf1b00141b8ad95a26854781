package com.sunil.DAO;

import java.util.ArrayList;
import java.util.List;

import javax.jdo.JDOHelper;
import javax.jdo.PersistenceManager;
import javax.jdo.PersistenceManagerFactory;
import javax.jdo.Query;
import javax.jdo.Transaction;

import com.sunil.Entities.Employee;
import com.sunil.entities.Commodity;

public class CommodityDAO {
	private	static PersistenceManagerFactory pmf = JDOHelper.getPersistenceManagerFactory("datanucleus.properties");
	
	/**
	 * @author sunil kumar
	 * 
	 * Stores Commodity details in the database. Return values indicates that the details are added or not.
	 * 
	 * @param commodity:Commodity
	 * @return boolean
	 * 
	 */
	public static boolean storeCommodity(Commodity commodity) {
		PersistenceManager pm = pmf.getPersistenceManager();
		Transaction transaction = pm.currentTransaction();
		boolean transactionStatus = false ;
		
		try {
			transaction.begin();
			pm.makePersistent(commodity);
			transaction.commit();
		}
		catch(Exception e) {
			System.out.println("Exception: " + e.getMessage());
			transaction.rollback();
			pm.close();
			return transactionStatus;
		} 
		finally {
			if(transaction.isActive()) {
				transaction.rollback();
			} 
			else {
				transactionStatus = true;
			}
			pm.close();
		}
		return transactionStatus;
	}
	
	/**
	 * @author sunil kumar
	 * 
	 * Stores list of commodities details in the database. Return values indicates that the details are added or not.
	 * 
	 * @param commodityList : List<Commodity>
	 * @return boolean
	 * 
	 */
	public static boolean storeCommodity(List<Commodity> commodityList) {
		PersistenceManager pm = pmf.getPersistenceManager();
		Transaction transaction = pm.currentTransaction();
		boolean transactionStatus = false ;
		
		try {
			transaction.begin();
			pm.makePersistentAll(commodityList);
			transaction.commit();
		}
		catch(Exception e) {
			System.out.println("Exception: " + e.getMessage());
			transaction.rollback();
			pm.close();
			return transactionStatus;
		} 
		finally {
			if(transaction.isActive()) {
				transaction.rollback();
			} 
			else {
				transactionStatus = true;
			}
			pm.close();
		}
		return transactionStatus;
	}
	
	/**
	 * @author sunil kumar
	 * 
	 * It fetches the Commodity details from the database corresponding to Id. if Id doesnot exists in database then it returns null.
	 * 
	 * @param id : Long
	 * @return Commodity
	 */
	public static Commodity getCommodity(Long id) {
		PersistenceManager pm = pmf.getPersistenceManager();
		Commodity commodity = null;
		
		try {
			Query query = pm.newQuery(Commodity.class);
			query.setFilter("this.empId == id");
			query.declareParameters("Integer id");
			query.setUnique(true);
			employee = (Employee) query.execute(empId);
			pm.makeTransient(employee);
			if(employee == null) {
				System.out.println("No Employee with empId: " + empId);
			}
		} 
		catch(Exception e) {
			System.out.println("Exception: " + e.getMessage());
		} 
		finally {
				pm.close();
		}
		
		return employee;
	}
	
	/**
	 * @author sunil kumar
	 * 
	 * It fetches the All the Employee details from the database corresponding to the list of empId's. 
	 * 
	 * @return List<Employee>
	 */
	public static List<Employee> getEmployee() {
		PersistenceManager pm = pmf.getPersistenceManager();
		List<Employee> empList = new ArrayList<Employee>(); ;

		try {
			Query query = pm.newQuery(Employee.class);
			empList = (List<Employee>) query.execute();
			pm.makeTransientAll(empList);
		} 
		catch(Exception e) {
			System.out.println("Exception: " + e.getMessage());
		} 
		finally {
				pm.close();
		}
		
		return empList;
	}

}
