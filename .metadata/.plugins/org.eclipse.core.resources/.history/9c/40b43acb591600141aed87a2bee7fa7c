package com.sunil.rest;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.GenericEntity;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import com.sunil.DAO.EmployeeDAO;
import com.sunil.Entities.Employee;

@Path("/json/employee")
public class JSONService {
	@GET
	@Path("/get/{param}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getEmployeeInJSON(@PathParam("param") String id) {
		int empId = Integer.parseInt(id);
		Employee emp = EmployeeDAO.getEmployee(empId);
		return Response.status(200).entity(emp).build();

	}

	@GET
	@Path("/getEmp")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public Response getEmployee() {
		List<Employee> empList = EmployeeDAO.getEmployee();
		GenericEntity<List<Employee>> genericEntity = new GenericEntity<List<Employee>>(
				empList) {};
		Response response = null;
		try {
			response = Response.status(201).entity(genericEntity).build();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return response;
	}

	@POST
	@Path("/post")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response postEmployee(Employee employee) {
		boolean b = EmployeeDAO.storeEmployee(employee);
		if (b) return Response.status(201).entity("Employee Details added.")
					.build();
		else return Response.status(202).entity("Employee Already Exists.")
				.build();
	}

	@POST
	@Path("/postMultiEmp")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response postMultipleEmployee(List<Employee> empList) {
		boolean b = EmployeeDAO.storeEmployee(empList);
		if (b)
			return Response.status(201).entity("Employee Details added.")
					.build();
		else
			return Response
					.status(202)
					.entity("Invalid Employee Details/Employee ID already exists.")
					.build();
	}

	@POST
	@Path("/updateEmp")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response updateEmployee(Employee employee) {
		boolean state;
		state = EmployeeDAO.updateEmployee(employee);
		if (state)
			return Response.status(201)
					.entity("Updated:\n" + employee.toString()).build();
		else
			return Response
					.status(202)
					.entity("Error in Updation: No Employee with ID="
							+ employee.getEmpId() + " exist.").build();
	}

	@POST
	@Path("/updateMultiEmp")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response updateEmployee(List<Employee> empList) {
		boolean state;
		state = EmployeeDAO.updateEmployee(empList);
		if (state)
			return Response.status(201)
					.entity("Updated:\n" + empList.toString()).build();
		else
			return Response.status(202).entity("Error in Updation").build();
	}

	@POST
	@Path("/delete/{param}")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response deleteEmployee(@PathParam("param") String id) {
		boolean status = EmployeeDAO.deleteEmployee(Integer.parseInt(id));
		if (status)
			return Response.status(201).entity("Employee details Deleted\n")
					.build();
		else
			return Response.status(202)
					.entity("No Employee with Employee ID:" + id + "\n")
					.build();
	}

	@POST
	@Path("/deleteAll")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response deleteEmployee() {
		boolean status = EmployeeDAO.deleteEmployee();
		if (status)
			return Response.status(201)
					.entity("All employee details deleted:\n").build();
		else
			return Response.status(202).entity("Error in Deletion.\n").build();
	}
	
	@GET
	@Path("/search")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public Response searchEmployee(@DefaultValue(0) @QueryParam("empId") int empId, @QueryParam("name") String name,
			@QueryParam("department") String department, @QueryParam("age") Integer age, 
			@QueryParam("address") String address) {
		Employee emp = new Employee(empId, name, department, age, address);
		List<Employee> empList = EmployeeDAO.serachEmployee(emp);
		GenericEntity<List<Employee>> genericEntity = new GenericEntity<List<Employee>>(
				empList) {};
		if(empList != null) {
			return Response.status(201)
					.entity(genericEntity).build();
		}
		else {
			return Response.status(200)
					.entity(genericEntity).build();
		}
		
	}

}